// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  image     String?  // Optional profile image
  products  Product[]
  address   Address?
  orders    Order[]   @relation("UserOrders")// Orders where the user is the buyer
  sellerOrders Order[]  @relation("SellerOrders")// Orders where the user is the seller 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id          String  @id @default(uuid())
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id            String   @id @default(uuid())
  name          String
  description   String
  price         Float
  stock         Int
  mainImage     String   // Primary product image
  additionalImages String[] // Additional product images
  sellerId    String
  seller      User     @relation(fields: [sellerId], references: [id])
  categoryId   String? 
  category     Category?   @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation("UserOrders",fields: [userId], references: [id])
  sellerId  String
  seller    User     @relation("SellerOrders", fields: [sellerId], references: [id])
  products  Json     // Stores product details: ID, name, quantity, price.
  amount    Float
  status    OrderStatus   @default(PENDING)
  address   Json      // Store shipping details here
  createdAt DateTime  @default(now())
  updatedAt DateTime    @updatedAt
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  products    Product[]  // One-to-many relationship
}

enum Role {
  ADMIN
  SELLER
  USER
}

enum OrderStatus {
  PENDING
  PROCESSING
  DISPATCHED
  DELIVERED
  CANCELLED
}
